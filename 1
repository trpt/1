#!/bin/bash

# cryptsetup wrapper by Trepet
# Â© GPLv3


## General options
# Path to mountpoints
mountpath='/media/'
# How to open encrypted containers - first try is luks, then plain mode
cryptcmd_open='cryptsetup open'
cryptcmd_open_plain='cryptsetup open --hash=sha512 --cipher=aes-xts-plain64 --type=plain'
# How to open encrypted keyfiles
cryptcmd_open_keyfile='cryptsetup open --hash=sha512 --cipher=aes-xts-plain64 --type=plain'
# Ignore these when listing containers to close
listing_ignore='--ignore=root --ignore=control'

## Creating encrypted container options
# Set to 1 to use cryptcmd_encrypt_plain encryption (see below)
encrypt_plain=1
# Filesystem to format (mkfs.* command): fat, ext4, btrfs etc.
format_fs='ext4'
# Encryption parameters in plain mode and luks
cryptcmd_encrypt_plain='cryptsetup open --hash=sha512 --cipher=aes-xts-plain64 --type=plain'
cryptcmd_encrypt_luks='cryptsetup luksFormat --hash=sha512 --cipher=aes-xts-plain64'

######################################
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Not running as root"
    exit
fi

usage() {
  cat <<EOF

cryptsetup wrapper by Trepet

usage: ${0##*/} [action]

  action
    o - open block device with passphrase
    ok - open block device with encrypted keyfile
    of - open file with passphrase
    ofk - open file with encrypted keyfile
    n - encrypt block device with passphrase
    nk - encrypt block device with encrypted keyfile
    nf - create file container encrypted with passphrase
    nfk - create file container with encrypted keyfile
    gf - generate new file of specifeid size with random data
    gkf - generate new keyfile with /dev/random
    c - unmount and close container
    1 - force unmount and close all containers
    wipe - securely wipe block device with cryptsetup

  Config (check source)
    mount path:
    $mountpath

    filesystem for new containers:
    $format_fs

    use plain mode for new containers, 1 - yes:
    $encrypt_plain

EOF
}

die() {
	echo "$@" >&2
	exit 1
}

checkmount () {
  mount "/dev/mapper/$mountp" "$mountpath$mountp" 2> /dev/null
  if [[ $? -eq 0 ]]; then
    tput reset
    echo "Mount success!"
    else
    echo 'Mount failed'
    rmdir "$mountpath$mountp" && cryptsetup close "/dev/mapper/$mountp" 2> /dev/null
  fi
}

checkmountdir () {
  echo -en "\n"
  echo "Mountpoint name"
  read -p "$mountpath" mountp
  echo -en "\n"
  if [ "$(ls -A \"$mountpath$mountp\" 2> /dev/null)" ]; then
    echo 'Mountpoint exists and not empty'
    checkmountdir
  else
    pattern=" |'"
    if [[ "$mountp" =~ $pattern ]]; then
      echo "Mountpoint contains unsupported characters"
      checkmountdir
    else
      [[ ! -d "$mountpath$mountp" ]] && mkdir "$mountpath$mountp"
    fi
  fi
}

checkcryptfile () {
  echo "Cryptofile path"
  read cryptfile
  if [[ ! -f "$cryptfile" ]]; then
    echo "Cryptofile doesn't exist"
    checkcryptfile
  fi
}

checkkeyfile () {
  echo -en "\n"
  echo "Keyfile path"
  read kf
  if [[ ! -f "$kf" ]]; then
    echo "Keyfile doesn't exist"
    checkkeyfile
  fi
}

checkblockdevice () {
  echo -en "\n"
  echo "Choose block device"
  read -p "/dev/" device
  if [[ ! -b "/dev/$device" ]] || [[ $(grep "/dev/$device" < /proc/mounts)  ]]; then
    echo "Device doesn't exist or is already mounted"
    checkblockdevice
  fi
}

checkmapper () {
  echo -en "\n"
  echo "Choose mounted container"
  read -p "/dev/mapper/" mountp
  if [[ ! -h "/dev/mapper/$mountp" ]]; then
    echo "Mapper doesn't exist"
    checkmapper
  fi
}

wipecs () {
  ## Wipe anything with cryptsetup
  ## Check 2.19 at https://gitlab.com/cryptsetup/cryptsetup/wikis/FrequentlyAskedQuestions
  cryptsetup open --type plain -d /dev/urandom "$1" tobewiped && \
  if [[ $(command -v ddrescue) ]]; then
    echo "ddrescue found, using it"
    ddrescue -f /dev/zero /dev/mapper/tobewiped 2>/dev/null
  else
    echo 'Wiping, this can take a while'
    cat /dev/zero > /dev/mapper/tobewiped 2>/dev/null
  fi
  sync && cryptsetup close tobewiped && echo "Done" || die "Error wiping $1"
}

wipedevice () {
  ## Wipe block device
  lsblk -o NAME,SIZE,MOUNTPOINT

  echo -en "\n"
  echo "Wipe device!"

  checkblockdevice

  echo -en "\n"
  echo "/dev/$device will be wiped! Type 'yes' and hit [ENTER]"
  read ask
  [[ $ask != 'yes' ]] && die Exiting

  wipecs "/dev/$device"
}

newfile () {
  ## Create new file container
  echo -en "\n"
  echo 'Type new file path'

  read newfilepath
  if [[ -e "$newfilepath" ]]; then
    echo "File exist!"
    newfile
  fi

  echo -en "\n"
  echo 'Size of the new file? E.g. 1000K, 20M, 1.5G'
  read newfilesize

  echo -en "\n"
  echo "Creating empty file..."
  head -c "$newfilesize" /dev/zero > "$newfilepath" && \
  echo "Filling with random data..." && \

  wipecs "$newfilepath"
}

newkeyfile () {
  ## Create new keyfile
  echo -en "\n"
  echo 'Type new keyfile path'

  read newkeyfilepath
  if [[ -e "$newkeyfilepath" ]]; then
    echo "File exist!"
    newfile
  fi

  echo -en "\n"
  echo 'Size of the new keyfile in bytes. 256 is ok, /dev/random may be very slow!'
  read newkeyfilesize

  echo -en "\n"
  echo "Creating empty file..."
  head -c "$newkeyfilesize" /dev/random > "$newkeyfilepath" && \
  echo "Done. Your new keyfile is at"
  echo "$newkeyfilepath"
}

encrypt_block () {
  ## Encrypt existing block device
  echo -en "\n"
  echo "First, you have to fill your block device with random data"
  echo 'Hit [ENTER] to proceed, type "skip" to skip this step, CTRL-C to exit'
  read skipwipe

  if [[ $skipwipe == "skip" ]]; then
    lsblk -o NAME,SIZE,MOUNTPOINT
    echo -en "\n"
    echo "Skip wiping, choose device to encrypt"
    checkblockdevice
  else
    wipedevice
  fi

  if [[ $mode == "keyfile" ]]; then
    echo -en "\n"
    echo 'Keyfile for device encryption'
    checkkeyfile
  fi

  mountp=new_sec_device
  echo -en "\n"
  echo "It is very important to choose good passprhase!"

  if [[ $encrypt_plain -eq 1 ]]; then
    cryptcmd_encrypt="$cryptcmd_encrypt_plain"
    echo "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- /dev/$device "$mountp" < /dev/mapper/keyfile_tmp
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt /dev/$device "$mountp" --verify-passphrase
    fi
  else
    cryptcmd_encrypt="$cryptcmd_encrypt_luks"
    echo "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- /dev/$device < /dev/mapper/keyfile_tmp && \
      cryptsetup open --key-file=- /dev/$device "$mountp" < /dev/mapper/keyfile_tmp && \
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt /dev/$device && \
      cryptsetup open /dev/$device "$mountp"
    fi
  fi && \
  echo "Filesystem: $format_fs. Formatting..." && \
  mkfs."${format_fs}" /dev/mapper/$mountp && sync && cryptsetup close "$mountp" && \
  echo "Done encrypting /dev/$device" || (umount $mountp && die "Something went wrong")
}

encrypt_file () {
  ## Create encrypted file container

  newfile

  if [[ $mode == "keyfile" ]]; then
    echo -en "\n"
    echo 'Keyfile for device encryption'
    checkkeyfile
  fi

  mountp=new_sec_device
  echo -en "\n"
  echo "It is very important to choose good passprhase!"

  if [[ $encrypt_plain -eq 1 ]]; then
    cryptcmd_encrypt="$cryptcmd_encrypt_plain"
    echo "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- "$newfilepath" "$mountp" < /dev/mapper/keyfile_tmp
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt "$newfilepath" "$mountp" --verify-passphrase
    fi
  else
    cryptcmd_encrypt="$cryptcmd_encrypt_luks"
    echo "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- "$newfilepath" < /dev/mapper/keyfile_tmp && \
      cryptsetup open --key-file=- "$newfilepath" "$mountp" < /dev/mapper/keyfile_tmp && \
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt "$newfilepath" && \
      cryptsetup open "$newfilepath" "$mountp"
    fi
  fi && \
  echo "Filesystem: $format_fs. Formatting..." && \
  mkfs."${format_fs}" /dev/mapper/$mountp && sync && cryptsetup close "$mountp" && \
  echo "Done encrypting $newfilepath" || (umount $mountp && die "Something went wrong")
}


umountcont () {
  ## Unmount and close container
  if [[ -z $1 ]]; then
    ls --color=auto $listing_ignore /dev/mapper/
    checkmapper
  else
    mountp="$1"
    force=1
  fi

  if [[ -d "$mountpath$mountp" ]]; then
      sync && \
      [[ $force -eq 1 ]] && umount --force --lazy "$mountpath$mountp" || umount "$mountpath$mountp"
      rmdir "$mountpath$mountp"
      cryptsetup close $mountp && tput reset && echo "Ok" || die "Something went wrong"
  else
      sync && cryptsetup close $mountp && tput reset && echo "Ok" || die "Something went wrong"
  fi
}

umountall () {
  mappers=($(ls $listing_ignore --color=never /dev/mapper/))
  for i in "${mappers[@]}"
  do
    umountcont $i
  done
}

open_cont () {
  ## Open container
  case $mode in

    simple_block)
      $cryptcmd_open /dev/$device "$mountp" || \
      (echo "Trying plain mode" && \
      $cryptcmd_open_plain /dev/$device "$mountp")
    ;;

    simple_file)
      $cryptcmd_open "$cryptfile" "$mountp" || \
      (echo "Trying plain mode" && \
      $cryptcmd_open_plain "$cryptfile" "$mountp")
    ;;

    ekey_block)
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      ($cryptcmd_open --key-file=- /dev/$device "$mountp" < /dev/mapper/keyfile_tmp || \
      (echo "Trying plain mode" && \
      $cryptcmd_open_plain --key-file=- /dev/$device "$mountp" < /dev/mapper/keyfile_tmp)
      cryptsetup close keyfile_tmp)
    ;;

    ekey_file)
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      ($cryptcmd_open --key-file=- $cryptfile $mountp < /dev/mapper/keyfile_tmp || \
      (echo "Trying plain mode" && \
      $cryptcmd_open_plain --key-file=- $cryptfile $mountp < /dev/mapper/keyfile_tmp)
      cryptsetup close keyfile_tmp)
    ;;
  esac
}


case $1 in
  o|open)
    ## Open block device with passphrase
    lsblk -o NAME,SIZE,MOUNTPOINT

    checkblockdevice
    checkmountdir

    mode='simple_block'
    open_cont && \

    checkmount
  ;;

  of|openfile)
    ## Open file with passphrase
    checkcryptfile
    checkmountdir

    mode='simple_file'
    open_cont && \

    checkmount
  ;;

  ok|openkey)
    ## Open block device with encrypted keyfile
    lsblk -o NAME,SIZE,MOUNTPOINT

    checkblockdevice
    checkkeyfile
    checkmountdir

    mode='ekey_block'
    open_cont && \

    checkmount
  ;;

  ofk|openkeyfile)
    ## Open file with encrypted keyfile

    checkcryptfile
    checkkeyfile
    checkmountdir

    mode='ekey_file'
    open_cont && \

    checkmount
  ;;

  n|new)
    echo "Encrypt block device with passphrase"
    encrypt_block
  ;;

  nk|newkey)
    echo "Encrypt block device with encrypted keyfile"
    mode='keyfile'
    encrypt_block
  ;;

  nf|newfile)
    echo "Create file container encrypted with passphrase"
    encrypt_file
  ;;

  nfk|newfilekey)
    echo "Create file container with encrypted keyfile"
    mode='keyfile'
    encrypt_file
  ;;

  gf|createfile)
    echo 'Generating new file with random data'
    newfile
  ;;

  gkf|createkeyfile)
    echo 'Generating new keyfile with /dev/random'
    newkeyfile
  ;;

  c|close)
    echo "Unmount and close container"
    umountcont
  ;;

  w|wipe)
    wipedevice
  ;;

  1|panic)
  ## Unmount and close all containers
    umountall
  ;;

  *)
    usage
  ;;
esac
