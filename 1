#!/bin/bash

# cryptsetup wrapper by Trepet
# v. 1.88
# Â© GPLv3


## General options
# Path to mountpoints
mountpath='/media/'
# How to open encrypted containers - first try LUKS, then plain mode
cryptcmd_open='cryptsetup open'
cryptcmd_open_plain='cryptsetup open --hash=sha512 --cipher=aes-xts-plain64 --type=plain'
# How to open encrypted keyfiles
cryptcmd_open_keyfile='cryptsetup open --hash=sha512 --cipher=aes-xts-plain64 --type=plain'
# Ignore these when listing containers to close
listing_ignore='--ignore=root --ignore=control'
# Search for devices in '/dev/'
dev_search='yes'
# Use colors in messages
colors='yes'

## Creating encrypted container options
# Set to 'yes' to use cryptcmd_encrypt_plain encryption (see below)
encrypt_plain='yes'
# Filesystem to format (mkfs.* command): fat, ext4, btrfs etc.
format_fs='ext4'
# Encryption parameters in plain mode and luks
cryptcmd_encrypt_plain='cryptsetup open --hash=sha512 --cipher=aes-xts-plain64 --type=plain'
cryptcmd_encrypt_luks='cryptsetup luksFormat --iter-time=5000 --hash=sha512 --cipher=aes-xts-plain64'
# Use simple anti-forensic (I think :) function - adds random bytes in range of 1 to 511 to new file containers
add_rnd='yes'

######################################
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
  echo "Not running as root"
  exit
fi


usage() {
  cat <<EOF

cryptsetup wrapper by Trepet

usage: ${0##*/} [action]

  action
    o, open - decrypt something and mount it in $mountpath
    n, new - encrypt block device or create encrypted file container
    f, file - generate new file of specifeid size with random data
    k, key - generate new keyfile with /dev/random
    c, close - unmount and close container
    1, panic - force unmount and close all containers
    w, wipe - securely wipe block device with cryptsetup

  Config (check source)
    mount path: $mountpath

    filesystem for new containers: $format_fs

    use plain mode for new containers: $encrypt_plain

    search for block devices without '/dev/' prefix: $dev_search

    use colors: $colors

EOF
}

die() {
  [[ $colors = 'yes' ]] && echo -e "\n\033[1;31m$@\033[0m" >&2 || echo -e "\n$@" >&2
	exit 1
}

title() {
  [[ $colors = 'yes' ]] && echo -e "\n\033[1;36m$@\033[0m\n" || echo -e "\n$@\n"
}

warning() {
  [[ $colors = 'yes' ]] && echo -e "\033[1;31m$@\033[0m" || echo -e "$@"
}

message() {
  [[ $colors = 'yes' ]] && echo -e "\033[1;37m$@\033[0m" || echo -e "$@"
}

rnd_gen() {
# Generate random number from 1 to 511
# https://stackoverflow.com/questions/2556190/random-number-from-a-range-in-a-bash-script
od -N2 -An -i < /dev/urandom | awk -v f=1 -v r=511 '{printf "%i\n", f + r * $1 / 65536}'
}

checkmount () {
  mount "/dev/mapper/$mountp" "$mountpath$mountp" 2> /dev/null
  if [[ $? -eq 0 ]]; then
    tput reset
    message "Mount success!"
    else
    warning 'Mount failed'
    rmdir "$mountpath$mountp" && cryptsetup close "/dev/mapper/$mountp" 2> /dev/null
  fi
}

checkmountdir () {
  echo -en "\n"
  message "Mountpoint name"
  read -p "$mountpath" mountp
  echo -en "\n"
  if [ "$(ls -A \"$mountpath$mountp\" 2> /dev/null)" ]; then
    warning 'Mountpoint exists and not empty'
    checkmountdir
  else
    pattern=" |'"
    if [[ "$mountp" =~ $pattern ]]; then
      warning "Mountpoint contains unsupported characters"
      checkmountdir
    else
      [[ ! -d "$mountpath$mountp" ]] && mkdir "$mountpath$mountp"
    fi
  fi
}

checkcryptfile () {
  message "Cryptofile path"
  read cryptfile

  if [[ -e "$cryptfile" && $create -eq 1 ]]; then
    warning "File exist!"
    checkcryptfile
    return
  fi

  if [[ -f "$cryptfile" || $create -eq 1 ]] && [[ !($dev_search = 'yes' && -b "/dev/$cryptfile") ]]; then
    mode='file'
  else
    if [[ $dev_search = 'yes' ]] && [[ -b "/dev/$cryptfile" ]]; then
      cryptfile="/dev/$cryptfile"
      message "$cryptfile is used"
    fi

    if [[ ! -b "$cryptfile" ]]; then
      warning "$cryptfile does not exist"
      checkcryptfile
    fi

    if [[ $(grep "$cryptfile" < /proc/mounts) ]]; then
      warning "$cryptfile is a block device and is mounted"
      checkcryptfile
    fi

    mode='block'
  fi
}

checkkeyfile () {
  echo -en "\n"
  message "Keyfile path, leave blank to skip"
  read kf
  if [[ ! -z "$kf" ]]; then
    if [[ ! -f "$kf" ]]; then
      warning "Keyfile does not exist"
      checkkeyfile
    else
      mode="ekey$mode"
    fi
  else
    mode="simple$mode"
  fi
}

checkmapper () {
  echo -en "\n"
  message "Choose mounted container"
  read -p "/dev/mapper/" mountp
  if [[ ! -h "/dev/mapper/$mountp" ]]; then
    warning "Mapper doesn't exist"
    checkmapper
  fi
}

wipecs () {
  ## Wipe anything with cryptsetup
  ## Check 2.19 at https://gitlab.com/cryptsetup/cryptsetup/wikis/FrequentlyAskedQuestions
  cryptsetup open --type plain -d /dev/urandom "$1" tobewiped && \
  if [[ $(command -v ddrescue) ]]; then
    message "ddrescue found, using it"
    ddrescue -f /dev/zero /dev/mapper/tobewiped 2>/dev/null
  else
    message 'Wiping, this can take a while'
    cat /dev/zero > /dev/mapper/tobewiped 2>/dev/null
  fi
  sync && cryptsetup close tobewiped && message "Done" || die "Error wiping $1"
}

wipedevice () {
  ## Wipe block device
  if [[ ! -b "$cryptfile" ]]; then
    warning "$cryptfile is not a block device"
    checkcryptfile
  fi

  echo -en "\n"
  warning "$cryptfile will be wiped! Type 'yes' and hit [ENTER]"
  read ask
  [[ $ask != 'yes' ]] && die "Exiting"

  wipecs "$cryptfile"
}

newfile () {
  ## Create new file container
  [[ -e "$cryptfile" ]] && die "File exist!"

  message 'Size of the new file? E.g. 1000K, 20M, 1.5G'
  read newfilesize

  echo -en "\n"
  message "Creating empty file..."
  #dd if=/dev/zero of="$cryptfile" bs="$newfilesize" count=1 && \
  fallocate -l "$newfilesize" "$cryptfile" && \
  ([[ $add_rnd = 'yes' ]] && dd if=/dev/zero of="$cryptfile" oflag=append conv=notrunc bs="$(rnd_gen)" count=1 || true) && \
  message "Filling with random data..." && \

  wipecs "$cryptfile" || \
  die "Error creating empty file"
}

newkeyfile () {
  ## Create new keyfile
  [[ -e "$cryptfile" ]] && die "File exist!"

  message 'Size of the new keyfile in bytes. 512-4096 is ok, /dev/random may be very slow!'
  read newkeyfilesize

  echo -en "\n"
  message "Creating keyfile..."
  head -c "$newkeyfilesize" /dev/random > "$cryptfile" && \
  message "Done. Your new keyfile is at $cryptfile"
}

encrypt_block () {
  ## Encrypt existing block device
  message "First, you have to fill your block device with random data"
  message 'Hit [ENTER] to proceed, type "skip" to skip this step, CTRL-C to exit'
  read skipwipe

  if [[ $skipwipe == "skip" ]]; then
    echo -en "\n"
    message "Skip wiping"
  else
    wipedevice
  fi

  mountp=new_sec_device
  echo -en "\n"
  warning "It is very important to choose good passprhase!"

  if [[ $encrypt_plain = 'yes' ]]; then
    cryptcmd_encrypt="$cryptcmd_encrypt_plain"
    message "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile --verify-passphrase "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt --verify-passphrase "$cryptfile" "$mountp"
    fi
  else
    cryptcmd_encrypt="$cryptcmd_encrypt_luks"
    message "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile --verify-passphrase "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- "$cryptfile" < /dev/mapper/keyfile_tmp && \
      cryptsetup open --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp && \
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt "$cryptfile" && \
      cryptsetup open "$cryptfile" "$mountp"
    fi
  fi && \
  message "Filesystem: $format_fs. Formatting..." && \
  mkfs."${format_fs}" "/dev/mapper/$mountp" && sync && cryptsetup close "$mountp" 2>/dev/null && \
  message "Done encrypting $cryptfile" || (umount "/dev/mapper/$mountp" 2>/dev/null & cryptsetup close "$mountp" 2>/dev/null & die "Something went wrong")
}

encrypt_file () {
  ## Create encrypted file container
  mountp=new_sec_device
  echo -en "\n"
  warning "It is very important to choose good passprhase!"

  if [[ $encrypt_plain = 'yes' ]]; then
    cryptcmd_encrypt="$cryptcmd_encrypt_plain"
    message "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile --verify-passphrase "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt --verify-passphrase "$cryptfile" "$mountp"
    fi
  else
    cryptcmd_encrypt="$cryptcmd_encrypt_luks"
    message "Encrypt options: \"$cryptcmd_encrypt\""
    if [[ -n $kf ]]; then
      $cryptcmd_open_keyfile --verify-passphrase "$kf" keyfile_tmp && \
      $cryptcmd_encrypt --key-file=- "$cryptfile" < /dev/mapper/keyfile_tmp && \
      cryptsetup open --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp && \
      cryptsetup close keyfile_tmp
    else
      $cryptcmd_encrypt "$cryptfile" && \
      cryptsetup open "$cryptfile" "$mountp"
    fi
  fi && \
  message "Filesystem: $format_fs. Formatting..." && \
  mkfs."${format_fs}" "/dev/mapper/$mountp" && sync && cryptsetup close "$mountp" 2>/dev/null && \
  message "Done encrypting $cryptfile" || (umount "$mountp" 2>/dev/null & cryptsetup close "$mountp" 2>/dev/null & die "Something went wrong")
}


umountcont () {
  ## Unmount and close container
  if [[ -z $1 ]]; then
    ls --color=auto $listing_ignore /dev/mapper/
    checkmapper
  else
    mountp="$1"
    force=1
  fi

  if [[ -d "$mountpath$mountp" ]]; then
    sync && \
    [[ $force -eq 1 ]] && umount --force --lazy "$mountpath$mountp" || umount "$mountpath$mountp"
    rmdir "$mountpath$mountp"
    cryptsetup close $mountp && tput reset && message "Ok" || die "Something went wrong"
  else
    sync && cryptsetup close $mountp && tput reset && message "Ok" || die "Something went wrong"
  fi
}

umountall () {
  mappers=($(ls $listing_ignore --color=never /dev/mapper/))
  for i in "${mappers[@]}"
  do
    umountcont $i
  done
}

open_cont () {
  ## Open encrypted container
  case $mode in

    simpleblock)
      title "Open block device $cryptfile"
      $cryptcmd_open "$cryptfile" "$mountp" || \
      (message "Trying plain mode" && \
      $cryptcmd_open_plain "$cryptfile" "$mountp")
    ;;

    simplefile)
      title "Open file container $cryptfile"
      $cryptcmd_open "$cryptfile" "$mountp" || \
      (message "Trying plain mode" && \
      $cryptcmd_open_plain "$cryptfile" "$mountp")
    ;;

    ekeyblock)
      title "Open block device $cryptfile with encrypted keyfile"
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      ($cryptcmd_open --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp || \
      (message "Trying plain mode" && \
      $cryptcmd_open_plain --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp)
      cryptsetup close keyfile_tmp)
    ;;

    ekeyfile)
      title "Open file container $cryptfile with encrypted keyfile"
      $cryptcmd_open_keyfile "$kf" keyfile_tmp && \
      ($cryptcmd_open --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp || \
      (message "Trying plain mode" && \
      $cryptcmd_open_plain --key-file=- "$cryptfile" "$mountp" < /dev/mapper/keyfile_tmp)
      cryptsetup close keyfile_tmp)
    ;;
  esac
}

new_cont () {
  ## Create encrypted container
  case $mode in

    simpleblock)
      title "Encrypt block device $cryptfile"
      encrypt_block
    ;;

    simplefile)
      title "Encrypt file container $cryptfile"
      newfile
      encrypt_file
    ;;

    ekeyblock)
      title "Encrypt block device $cryptfile with encrypted keyfile"
      encrypt_block
    ;;

    ekeyfile)
      title "Encrypt file container $cryptfile with encrypted keyfile"
      newfile
      encrypt_file
    ;;
  esac
}

case $1 in
  o|open)
    lsblk -o NAME,SIZE,MOUNTPOINT
    title "Decrypt something"
    checkcryptfile
    checkkeyfile
    checkmountdir
    open_cont && \
    checkmount
  ;;

  n|new)
    lsblk -o NAME,SIZE,MOUNTPOINT
    title "Encrypt something"
    create=1
    checkcryptfile
    checkkeyfile
    new_cont
  ;;

  f|file)
    title "Generating new file with random data"
    create=1
    checkcryptfile
    echo -en "\n"
    newfile
  ;;

  k|key)
    title "Generating new keyfile with /dev/random"
    create=1
    checkcryptfile
    echo -en "\n"
    newkeyfile
  ;;

  c|close)
    message "Unmount and close container"
    umountcont
  ;;

  w|wipe)
    warning "Wipe device"
    checkcryptfile
    wipedevice
  ;;

  1|panic)
    umountall
  ;;

  *)
    usage
  ;;
esac
